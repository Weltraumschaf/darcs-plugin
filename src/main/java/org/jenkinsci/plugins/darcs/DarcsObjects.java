/*
 *  LICENSE
 *
 * "THE BEER-WARE LICENSE" (Revision 43):
 * "Sven Strittmatter" <weltraumschaf@googlemail.com> wrote this file.
 * As long as you retain this notice you can do whatever you want with
 * this stuff. If we meet some day, and you think this stuff is worth it,
 * you can buy me a non alcohol-free beer in return.
 *
 * Copyright (C) 2012 "Sven Strittmatter" <weltraumschaf@googlemail.com>
 */
package org.jenkinsci.plugins.darcs;

import java.util.Arrays;
import java.util.Map;
import java.util.TreeMap;

/**
 * Helper methods inspired by <a href="http://code.google.com/p/guava-libraries/">Google Guava</a>.
 *
 * Own implementation to do not overload the plugin with heavy dependency only for few methods to use.
 *
 * @author Sven Strittmatter <weltraumschaf@googlemail.com>
 */
public final class DarcsObjects {

    /**
     * Private for pure static utility class.
     */
    private DarcsObjects() {
        super();
    }

    /**
     * Generates a hash code for multiple values.
     *
     * The hash code is generated by calling {@link Arrays#hashCode(Object[])}.
     *
     * <strong>Warning</strong>: When a single object is supplied, the returned hash code does not equal the hash code
     * of that object.
     *
     * @param objects hashed objects
     * @return hash code
     */
    public static int hashCode(Object... objects) {
        return Arrays.hashCode(objects);
    }

    /**
     * Checks for not equality and respects {@code null} values.
     *
     * @param a first object to compare
     * @param b second object to compare
     * @return {@code true} if a and b are <strong>not</strong> equal, else {@code false}
     */
    public static boolean notEqual(final Object a, final Object b) {
        return !equal(a, b);
    }

    /**
     * Helper which respects {@code null} values on equality check.
     *
     * @param a first object to compare
     * @param b second object to compare
     * @return {@code true} if a and b are equal, else {@code false}
     */
    public static boolean equal(final Object a, final Object b) {
        return a == b || (a != null && a.equals(b));
    }

    /**
     * Helper to generate {@link Object#toString()} representations.
     *
     * @param name name of class
     * @return new instance of builder class
     * //CHECKSTYLE:OFF
     * @throws IllegalArgumentException if name is null
     * //CHECKSTYLE:ON
     */
    public static ToStringHelper toString(final String name) {
        if (null == name) {
            throw new IllegalArgumentException("Name must not be null!");
        }

        return new ToStringHelper(name);
    }

    /**
     * Builder class to hold properties and generate string representation.
     */
    public static final class ToStringHelper {
        /**
         * Name of represented class.
         */
        private final String name;
        /**
         * Map of represented properties.
         */
        private final Map<String, Object> properties = new TreeMap<String, Object>();

        /**
         * Not callable from outside.
         *
         * Use {@link DarcsObjects#toString(java.lang.String)} to create instance.
         *
         * @param name of class
         */
        private ToStringHelper(final String name) {
            super();
            this.name = name;
        }

        /**
         * Add a represented property.
         *
         * @param propertyName of property
         * @param propertyValue represented property
         * @return itself
         */
        public ToStringHelper add(final String propertyName, final Object propertyValue) {
            properties.put(propertyName, propertyValue);
            return this;
        }

        @Override
        public String toString() {
            final StringBuilder buffer = new StringBuilder(32);
            buffer.append(name).append('{');
            boolean notFirst = false;

            for (final String propertyName : properties.keySet()) {
                if (notFirst) {
                    buffer.append(", ");
                }

                buffer.append(propertyName).append('=');
                final Object propertyValue = properties.get(propertyName);

                if (null == propertyValue) {
                    buffer.append("<NULL>");
                } else {
                    buffer.append(propertyValue);
                }

                notFirst = true;
            }

            return buffer.append('}').toString();
        }

    }
}
